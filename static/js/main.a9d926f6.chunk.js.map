{"version":3,"sources":["components/Todo.js","containers/Landing.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","todos","actionRemove","actionAllRemove","todoList","map","todo","index","react_default","a","createElement","className","key","id","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","value","desc","disabled","Button","color","onClick","Landing","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tempInput","e","setState","target","storeTodo","_this$state","state","push","removeTodo","todosList","filter","Row","Col","onChange","components_Todo","Component","App","Landing_Landing","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9d926f6.chunk.js","sourcesContent":["import React from 'react';\nimport { Input, Button, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\n\nconst Todo = (props) => {\n\tconst { todos, actionRemove, actionAllRemove } = props;\n\tconst todoList = todos.map((todo, index) => {\n\t\treturn (\n\t\t\t<div className=\"col my-1\" key={todo.id}>\n\t\t\t\t<InputGroup>\n\t\t\t\t\t<InputGroupAddon addonType=\"prepend\">\n\t\t\t\t\t\t<InputGroupText>{index + 1}</InputGroupText>\n\t\t\t\t\t</InputGroupAddon>\n\t\t\t\t\t<Input value={todo.desc} disabled />\n\t\t\t\t\t<Button color=\"danger\" onClick={() => actionRemove(todo.id)}>\n\t\t\t\t\t\tRemove -\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup>\n\t\t\t</div>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"col\">\n\t\t\t{[ todoList ]}\n\t\t\t<div className=\"col\">\n\t\t\t\t<InputGroup>\n\t\t\t\t\t<Input value=\"Clear All List\" disabled />\n\t\t\t\t\t<Button color=\"warning\" onClick={() => actionAllRemove()}>\n\t\t\t\t\t\tRemove All\n\t\t\t\t\t</Button>\n\t\t\t\t</InputGroup>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport { Input, Col, Row, Button, InputGroup } from 'reactstrap';\nimport '../assets/sass/_Landing.scss';\nimport Todo from '../components/Todo';\n\nexport default class Landing extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttodos: [ { id: 1, desc: `Learn Something this Weekends` } ],\n\t\t\ttempInput: '',\n\t\t\tid: 2\n\t\t};\n\t}\n\n\ttempInput = (e) => this.setState({ tempInput: e.target.value });\n\n\tactionAllRemove = () => this.setState({ todos: [] });\n\n\tstoreTodo = () => {\n\t\tlet { todos, id, tempInput } = this.state;\n\t\tif (tempInput !== '') {\n\t\t\tconst todo = { id: id++, desc: tempInput };\n\t\t\ttodos.push(todo);\n\t\t\tthis.setState({ todos, id: id++, tempInput: '' });\n\t\t}\n\t};\n\n\tremoveTodo = (id) => {\n\t\tlet { todos } = this.state;\n\t\tconst todosList = todos.filter((todo) => todo.id !== id);\n\t\tthis.setState({ todos: todosList });\n\t};\n\n\trender() {\n\t\tconst { todos } = this.state;\n\t\treturn (\n\t\t\t<div className=\"landing\">\n\t\t\t\t<Row className=\"h-100\">\n\t\t\t\t\t<Col className=\"my-auto mx-5 text-center\">\n\t\t\t\t\t\t<h1 className=\"text-light\">Todo App</h1>\n\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t<Input className=\"input\" onChange={this.tempInput} value={this.state.tempInput} />\n\t\t\t\t\t\t\t<Button color=\"info\" onClick={this.storeTodo}>\n\t\t\t\t\t\t\t\tAdd +\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col className=\"my-auto mx-5 text-center\">\n\t\t\t\t\t\t<h3 className=\"text-light\">My Todo List</h3>\n\t\t\t\t\t\t<Todo todos={todos} actionRemove={this.removeTodo} actionAllRemove={this.actionAllRemove} />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport Landing from './containers/Landing';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Landing />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}